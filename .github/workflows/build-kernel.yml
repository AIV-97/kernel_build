name: Build Kernel

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout config and source repos
        uses: actions/checkout@v4

      - name: Load config.env variables
        run: |
          while IFS='=' read -r key value; do
            [[ $key =~ ^#.*$ || -z $key ]] && continue
            echo "$key=$value" >> $GITHUB_ENV
          done < config.env

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison flex libssl-dev libelf-dev python3 python-is-python3 make clang lld curl

      - name: Pull Clang Toolchain
        run: |
          mkdir -p clang
          curl -L https://github.com/ZyCromerZ/Clang/releases/download/21.0.0git-20250604-release/Clang-21.0.0git-20250604.tar.gz \
            | tar -xzv -C clang

      - name: Clone Kernel Source
        run: |
          git clone --depth=1 https://x-access-token:${{ secrets.GH_PAT }}@github.com/AIV-97/kernel_6115.git -b ${{ env.KERNEL_SOURCE_BRANCH }} kernel-source

      - name: Prepare AnyKernel3 Directory
        run: |
          git clone --depth=1 ${{ env.ANYKERNEL_SOURCE }} -b ${{ env.ANYKERNEL_SOURCE_BRANCH }} AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md

      - name: Build Kernel & dtbo.img
        run: |
          export KBUILD_BUILD_USER="Fraschze97"
          export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH

          cd kernel-source

          # Load kernel config
          make ARCH=arm64 O=../out ${{ env.KERNEL_CONFIG }}

          # Build kernel & DTBs
          make -j$(nproc) ARCH=arm64 O=../out \
            CC=clang \
            LLVM=1 \
            LLVM_IAS=1 \
            CROSS_COMPILE=llvm- \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            Image.gz-dtb dtbs

          # Build dtbo.img (if dtbo not present)
          DTBO_DIR="../out/arch/arm64/boot/dts/vendor/qcom"
          if [ -z "$(find $DTBO_DIR -name '*.dtbo' 2>/dev/null)" ]; then
            for dtb in $DTBO_DIR/*.dtb; do
              dtc -I dtb -O dtb -o "${dtb%.dtb}.dtbo" "$dtb"
            done
          fi

          if [ -n "$(find $DTBO_DIR -name '*.dtbo' 2>/dev/null)" ]; then
            python3 scripts/mkdtboimg.py create dtbo.img $(find $DTBO_DIR -name '*.dtbo')
            cp dtbo.img ../AnyKernel3/dtbo.img
          fi

      - name: Package Kernel ZIP
        run: |
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          fi

          DATE=$(date +%d%m%y)
          RAND=$(shuf -i 1000-9999 -n 1)
          KERNEL_NAME="bengal"

          cd AnyKernel3
          zip -r9 "../Cassia-${KERNEL_NAME}-perf-${DATE}-${RAND}-KSU-SUSFS.zip" . -x "*.git*" "*.md"

          echo "NEW_ZIP_NAME=Cassia-${KERNEL_NAME}-perf-${DATE}-${RAND}-KSU-SUSFS.zip" >> $GITHUB_ENV

      - name: Upload Kernel ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-ZIP
          path: ${{ env.NEW_ZIP_NAME }}

      - name: Extract Build Info
        id: extract
        run: |
          echo "BRANCH=${{ env.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
          echo "DATE=$(date +%d%m%y)" >> $GITHUB_ENV
          echo "KERNEL_NAME=bengal" >> $GITHUB_ENV
          echo "LINUX_VER=$(cat kernel-source/out/include/generated/utsrelease.h 2>/dev/null | cut -d '\"' -f2 || echo 'unknown')" >> $GITHUB_ENV
          echo "LATEST_COMMIT=$(cd kernel-source && git log -1 --pretty=format:'%s (%an)' 2>/dev/null || echo 'unknown')" >> $GITHUB_ENV
          echo "CLANG_VERSION=$(clang/bin/clang --version | head -n1)" >> $GITHUB_ENV

      - name: Upload Kernel ZIP to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          BRANCH: ${{ env.BRANCH }}
          LINUX_VER: ${{ env.LINUX_VER }}
          LATEST_COMMIT: ${{ env.LATEST_COMMIT }}
          CLANG_VERSION: ${{ env.CLANG_VERSION }}
          NEW_ZIP_NAME: ${{ env.NEW_ZIP_NAME }}
          DATE: ${{ env.DATE }}
          KERNEL_NAME: ${{ env.KERNEL_NAME }}
        run: |
          TEXT="Branch: $BRANCH
          Linux version: $LINUX_VER
          Latest commit: $LATEST_COMMIT
          Compiler: $CLANG_VERSION
          Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Tags: #$DATE #${KERNEL_NAME}KSU #stable"

          curl -s -X POST https://api.telegram.org/bot$BOT_TOKEN/sendMessage \
            -d chat_id=$CHAT_ID -d text="$TEXT" -d parse_mode="HTML"

          curl -F document=@"$NEW_ZIP_NAME" -F chat_id=$CHAT_ID \
               -F caption="$NEW_ZIP_NAME" https://api.telegram.org/bot$BOT_TOKEN/sendDocument