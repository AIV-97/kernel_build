name: Build Kernel

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout config and source repos
        uses: actions/checkout@v4

      - name: Create 4G swapfile
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          swapon --show

      - name: Load config.env variables
        run: |
          while IFS='=' read -r key value; do
            [[ $key =~ ^#.*$ || -z $key ]] && continue
            echo "$key=$value" >> $GITHUB_ENV
          done < config.env

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y \
            bc bison flex libssl-dev make libc6-dev libncurses-dev \
            ccache python3 python3-pip build-essential \
            device-tree-compiler libtinfo5 libselinux-dev \
            curl git wget lftp ftp zip unzip tar gzip bzip2 \
            rar unrar zstd pigz libelf-dev libudev-dev \
            libprotobuf-dev protobuf-compiler liblz4-tool \
            libzstd-dev libarchive-tools rsync

      - name: Pull Clang Toolchain
        run: |
          mkdir -p clang          
          curl -L https://github.com/ZyCromerZ/Clang/releases/download/21.0.0git-20250617-release/Clang-21.0.0git-20250617.tar.gz | tar -xzv -C clang

      - name: Clone Kernel Source
        run: |
          git clone --depth=15 https://${{ secrets.GH_PAT }}@github.com/${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} kernel-source

      - name: Prepare AnyKernel3 Directory
        run: |
          git clone --depth=1 ${{ env.ANYKERNEL_SOURCE }} -b ${{ env.ANYKERNEL_SOURCE_BRANCH }} AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md

      - name: Build Kernel & dtbo.img
        run: |
          set -e
          export KBUILD_BUILD_USER="Fraschze97"
          export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH

          cd kernel-source
          clang -v

          args="ARCH=arm64 O=../out LD=ld.lld LLVM=1 LLVM_IAS=1"

          KCFLAGS="-Wno-default-const-init-var-unsafe \
                -Wdefault-const-init-field-unsafe \
                -Wimplicit-enum-enum-cast \
                -Wno-unused-value \
                -Wno-type-limits"

          make $KCFLAGS $args $KERNEL_CONFIG
          make -j$(nproc --ignore=2) $KCFLAGS $args

      - name: Package kernel
        run: |
          cd AnyKernel3
          ls -lh ../out/arch/arm64/boot/

          if [[ -f ../out/arch/arm64/boot/dtbo.img ]]; then
            cp ../out/arch/arm64/boot/dtbo.img dtbo.img
          fi

          if [[ -f ../out/arch/arm64/boot/dtb.img ]]; then
            cp ../out/arch/arm64/boot/dtb.img dtb.img
          fi

          if [[ -f ../out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp ../out/arch/arm64/boot/Image.gz-dtb Image.gz-dtb
          elif [[ -f ../out/arch/arm64/boot/Image-dtb ]]; then
            cp ../out/arch/arm64/boot/Image-dtb Image-dtb
          elif [[ -f ../out/arch/arm64/boot/Image.gz ]]; then
            cp ../out/arch/arm64/boot/Image.gz Image.gz
          elif [[ -f ../out/arch/arm64/boot/Image ]]; then
            cp ../out/arch/arm64/boot/Image Image
          else
            echo "‚ùå No kernel Image found! Build may have failed." && exit 1
          fi

      - name: Package Kernel ZIP
        run: |
          DATE=$(date +%d%m%y)
          RAND=$(shuf -i 1000-9999 -n 1)
          KERNEL_NAME="bengal"

          cd AnyKernel3
          zip -r9 "../Cassia-${KERNEL_NAME}-perf-${DATE}-${RAND}.zip" . -x "*.git*" "*.md"

          echo "NEW_ZIP_NAME=Cassia-${KERNEL_NAME}-perf-${DATE}-${RAND}.zip" >> $GITHUB_ENV

      - name: Upload Kernel ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-ZIP
          path: ${{ env.NEW_ZIP_NAME }}

      - name: Extract Build Info
        run: |
          echo "BRANCH=${{ env.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
          echo "DATE=$(date +%d%m%y)" >> $GITHUB_ENV
          echo "KERNEL_NAME=bengal" >> $GITHUB_ENV
          
          echo "LINUX_VER=$(cd kernel-source && \
          V=$(grep '^VERSION =' Makefile | cut -d '=' -f2 | xargs) && \
          P=$(grep '^PATCHLEVEL =' Makefile | cut -d '=' -f2 | xargs) && \
          S=$(grep '^SUBLEVEL =' Makefile | cut -d '=' -f2 | xargs) && \
          echo "${V}.${P}.${S}")" >> $GITHUB_ENV

      - name: Get Compiler and Commits
        run: |
          echo "CLANG_VERSION=$($GITHUB_WORKSPACE/clang/bin/clang --version | head -n1)" >> $GITHUB_ENV
          cd kernel-source
          git log -10 --pretty=format:"‚Ä¢ %s" > ../commits.txt

      - name: Upload Kernel ZIP to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          BRANCH: ${{ env.BRANCH }}
          LINUX_VER: ${{ env.LINUX_VER }}
          CLANG_VERSION: ${{ env.CLANG_VERSION }}
          NEW_ZIP_NAME: ${{ env.NEW_ZIP_NAME }}
          DATE: ${{ env.DATE }}
          KERNEL_NAME: ${{ env.KERNEL_NAME }}
        run: |
          COMMITS_PRINT=$(cat commits.txt)

          CAPTION="üì¶ <b>Kernel Build Success</b>
          üîÄ <b>Branch:</b> $BRANCH
          üß¨ <b>Linux version:</b> $LINUX_VER
          üõ† <b>Compiler:</b> $CLANG_VERSION
          üßæ <b>Last 10 commits:</b>
          $COMMITS_PRINT
          üè∑Ô∏è <b>Tags:</b> #$DATE #${KERNEL_NAME}KSU #stable
          üîó <b>CI:</b> <a href=\"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\">Click here</a>"

          curl -F document=@"$NEW_ZIP_NAME" \
               -F chat_id=$CHAT_ID \
               -F caption="$CAPTION" \
               -F parse_mode="HTML" \
               https://api.telegram.org/bot$BOT_TOKEN/sendDocument